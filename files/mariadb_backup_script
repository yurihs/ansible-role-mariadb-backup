#!/usr/bin/env bash

set -o pipefail

list_databases() {
	local databases_query="show databases;"
	mysql -N -e 'show databases' -h "$DB_HOSTNAME" -u "$DB_USERNAME" -P "$DB_PORT"
}


backup_databases() {
	for database in $(list_databases); do
		local filename="${database}.sql.gz"
		if (umask 077 && mysqldump --single-transaction --quick --lock-tables=false -h "$DB_HOSTNAME" -u "$DB_USERNAME" -P "$DB_PORT" | gzip > "${filename}.in_progress"); then
			mv "${filename}.in_progress" "$filename"
		else
			return 1
		fi;
	done
	return 0
}


print_usage() {
	echo "Usage:"
	echo "    $0 <configuration_file>"
	exit 1
}


load_config_file() {
	local config_file="$1"

	if [[ ! -r "$config_file" ]]; then
		echo "Unable to read configuration file at \"${config_file}\"." 1>&2
		exit 1
	fi;

	source "$config_file"
}


create_output_dir() {
	local output_dir="${OUTPUT_DIR_BASE%/}/$(date "+$DATE_FORMAT")"
	mkdir -p "$output_dir"
	echo "$output_dir"
}


main() {
	if [[ $# -ne 1 ]]; then
		print_usage "$0"
		exit
	fi

	local config_file="$1"
	load_config_file "$config_file" && echo "Loaded configuration from \"${config_file}\"."

	output_dir="$(create_output_dir)"
	echo "Created output directory \"${output_dir}\"."

	pushd . >/dev/null
	cd "$output_dir"

	echo "Starting databases backup."
	if backup_databases; then
		echo "Databases backup is done."
	else
		echo "Databases backup failed. Exiting."
		exit 1;
	fi;

	popd >/dev/null
}


main "$@"
